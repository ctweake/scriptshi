local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local framework = {
    connections = {},
    botActive = true,
    summonLoop = nil,
    commandUsers = {},
}

local ownerName = "Thisneed0122"
local gun = nil

if getgenv().api and getgenv().Options and getgenv().Options.ragebot_targets then
    local tab = getgenv().api:AddTab("Stand Bot")
    local groupbox = tab:AddLeftGroupbox("Bot")
    local values = getgenv().Options.ragebot_targets.Value or {}
    local whitelist = getgenv().Options.targeting_whitelist or {}
    local ragehitelist = getgenv().Options.ragebot_whitelist or {}
    local settings = getgenv().Options.ragebot_settings.Value or {}

    groupbox:AddToggle("bot_toggle", { Text = "Enabled", Default = true })

    local key = getgenv().Options.ragebot_keybind
    if key then
        key:SetValue({ key.Value, "Always" })
        if getgenv().Toggles then
            getgenv().Toggles.ragebot_enabled:SetValue(true)
            getgenv().Toggles.ragebot_use_selected:SetValue(true)
        end
    end

    gun = getgenv().Options.ragebot_weapon
    if gun then
        gun:SetValue("[Rifle]")
    else
        print("Gun object is nil")
    end

    local silentkey = getgenv().Options.silent_keybind
    if silentkey then
        silentkey:SetValue({ silentkey.Value, "Always" })
        if getgenv().Toggles and getgenv().Toggles.silent_toggle then
            getgenv().Toggles.silent_toggle:SetValue(true)
        else
            print("getgenv().Toggles.silent_toggle or getgenv().Toggles is nil")
        end
    end

    local ragebot = getgenv().Toggles.ragebot_enabled
    whitelist[ownerName] = true
    ragehitelist[ownerName] = true
    getgenv().Options.ragebot_whitelist:SetValue(ragehitelist)
    getgenv().Options.targeting_whitelist:SetValue(whitelist)
    framework.commandUsers[ownerName] = true
end

if getgenv().Toggles and getgenv().Toggles.bot_toggle then
    table.insert(framework.connections, RunService.Heartbeat:Connect(function()
        framework.botActive = getgenv().Toggles.bot_toggle.Value
    end))
else
    print("Toggles.bot_toggle is nil")
end

local function handleGunMode(message)
    if string.sub(message, 1, 5) == "!gun " then
        local gunName = string.sub(message, 6):lower()
        local gunMap = {
            rifle = "[Rifle]",
            lmg = "[LMG]",
            aug = "[AUG]",
        }
        if gunMap[gunName] then
            if gun then
                gun:SetValue(gunMap[gunName])
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Gun mode set to " .. gunMap[gunName], "All")
            else
                print("Gun object is nil. Gun mode change failed.")
            end
        else
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Invalid gun name.", "All")
            print("Invalid gun name.")
        end
    end
end

local function addAllPlayersToRagebotTargets()
    getgenv().Toggles.ragebot_use_selected:SetValue(false)
    getgenv().Options.ragebot_enabled:SetValue(true)
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Added all players to ragebot targets.", "All")
end

local function removeAllPlayersFromRagebotTargets()
    getgenv().Toggles.ragebot_use_selected:SetValue(true)
    getgenv().Options.ragebot_targets:SetValue({})
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Removed all players from ragebot targets.", "All")
end

local function removeAllPlayersFromWhitelist()
    local whitelist = { [ownerName] = true }
    local ragewhitelist = { [ownerName] = true }
    framework.commandUsers = { {} }
    framework.commandUsers = { [ownerName] = true }
    getgenv().Options.targeting_whitelist:SetValue(whitelist)
    getgenv().Options.ragebot_whitelist:SetValue(ragewhitelist)
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Removed all players from whitelist.", "All")
end

local function findPlayer(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        return player
    end

    local foundPlayers = {}
    local lowerPlayerName = playerName:lower()
    for _, p in ipairs(Players:GetPlayers()) do
        if string.find(p.Name:lower(), lowerPlayerName) or string.find(p.DisplayName:lower(), lowerPlayerName) then
            table.insert(foundPlayers, p)
        end
    end

    if #foundPlayers == 1 then
        return foundPlayers[1]
    elseif #foundPlayers > 1 then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Multiple players found matching '" .. playerName .. "'. Please be more specific.", "All")
        print("Multiple players found matching '" .. playerName .. "'. Please be more specific.")
        return nil
    else
        return nil
    end
end

local function handleAddPlayerCommand(message)
    if string.sub(message, 1, 5) == "!add " then
        local partialName = string.sub(message, 6)
        local foundPlayer = findPlayer(partialName)
        if foundPlayer and getgenv().Options and getgenv().Options.ragebot_targets then
            local rageEnabled = getgenv().Toggles.ragebot_enabled.Value
            getgenv().Options.ragebot_targets.Value[foundPlayer.Name] = true
            getgenv().Options.ragebot_targets:SetValue(getgenv().Options.ragebot_targets.Value)
            if not rageEnabled then
                getgenv().Toggles.ragebot_enabled:SetValue(true)
            end
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Added " .. foundPlayer.Name .. " to ragebot targets.", "All")
        end
    end
end

local function handleWhitelist(message)
    if string.sub(message, 1, 11) == "!whitelist " then
        local partialName = string.sub(message, 12)
        local foundPlayer = findPlayer(partialName)
        if foundPlayer and getgenv().Options and getgenv().Options.targeting_whitelist then
            whitelist = getgenv().Options.targeting_whitelist.Value or {}
            whitelist[foundPlayer.Name] = true
            ragewhitelist = getgenv().Options.ragebot_whitelist.Value or {}
            ragewhitelist[foundPlayer.Name] = true
            framework.commandUsers[foundPlayer.Name] = true
            getgenv().Options.targeting_whitelist:SetValue(whitelist)
            getgenv().Options.ragebot_whitelist:SetValue(ragewhitelist)
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Whitelisted " .. foundPlayer.Name .. ".", "All")
        end
    end
end

local function teleportToSpeaker(speaker)
    if not speaker then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Speaker is nil.", "All")
        print("Error: Speaker is nil.")
        return
    end

    local speakerCharacter = speaker.Character
    if not speakerCharacter or not speakerCharacter.PrimaryPart then
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Speaker's character or PrimaryPart not found.", "All")
        print("Error: Speaker's character or PrimaryPart not found.")
        return
    end

    local speakerCFrame = speakerCharacter.PrimaryPart.CFrame
    local angle = math.random() * 2 * math.pi
    local radius = 10
    local heightOffset = 0

    local randomX = radius * math.cos(angle)
    local randomZ = radius * math.sin(angle)
    local randomPosition = speakerCFrame * CFrame.new(randomX, heightOffset, randomZ)

    local head = speakerCharacter:FindFirstChild("Head")
    local lookAtCFrame = head and CFrame.lookAt(randomPosition.p, head.Position) or CFrame.lookAt(randomPosition.p, speakerCFrame.p)

    getgenv().Toggles.ragebot_enabled:SetValue(false)

    if LocalPlayer.Character then
        LocalPlayer.Character:PivotTo(lookAtCFrame)
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Summoned by " .. speaker.Name .. ".", "All")
    else
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Error: Local player's character not found.", "All")
        print("Error: Local player's character not found.")
    end

    if not head then
        print("Target head not found. Aiming at primary part instead.")
    end
end

local function handleVoidCommand(enable)
    if getgenv().Toggles and getgenv().Toggles.ragebot_enabled then
        getgenv().Toggles.ragebot_enabled:SetValue(enable)
        if enable then
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ragebot enabled.", "All")
        else
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Ragebot disabled.", "All")
        end
    end
end

local function handleChat(message, speakerName)
    if framework.botActive and (framework.commandUsers[speakerName] or speakerName == ownerName) then
        local commands = {
            ["!ka"] = addAllPlayersToRagebotTargets,
            ["!stop"] = removeAllPlayersFromRagebotTargets,
            ["!unwhitelist"] = removeAllPlayersFromWhitelist,
            ["!summon"] = function(msg, speaker) teleportToSpeaker(Players:FindFirstChild(speaker)) end,
            ["!void"] = function() handleVoidCommand(true) end,
            ["!unvoid"] = function() handleVoidCommand(false) end,
            ["!gun "] = handleGunMode,
            ["!add "] = handleAddPlayerCommand,
            ["!whitelist "] = handleWhitelist,
        }
        for cmd, func in pairs(commands) do
            if string.sub(message, 1, #cmd) == cmd then
                func(message, speakerName)
                return
            end
        end
    end
end

local function setupChatListeners()
    for _, player in ipairs(Players:GetPlayers()) do
        player.Chatted:Connect(function(message)
            handleChat(message, player.Name)
        end)
    end
end

setupChatListeners()

Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        handleChat(message, player.Name)
    end)
end)

if getgenv().api then
    function api:Unload()
        for _, connection in framework.connections do
            connection:Disconnect()
        end
        table.clear(framework)
    end
end
